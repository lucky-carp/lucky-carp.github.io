[{"title":"fitness0508","url":"/fitness0508/","content":"私教课的第二节，今天练胸！\n","categories":["Life"],"tags":["Fitness"]},{"title":"clickhouse-base","url":"/clickhouse-base/","content":"本篇记录了clickhouse的基础知识，用于回顾。\n","categories":["Technology"],"tags":["knowledge"]},{"title":"美食分享——天宝兄弟罗氏虾","url":"/roche-shrimp/","content":"天宝兄弟的罗氏虾在长沙这个遍地小龙虾的地盘竟然能做到一绝，让我跟鹿崽流连忘返，必有它的绝佳秘方，但是一盘一斤的罗氏虾能卖到228，活虾也才80一斤，为了减少消费，拴住老婆的胃，这菜我必须学会！\n","categories":["Life"],"tags":["Cooking"]},{"title":"Keep——A simple and elegant theme for Hexo.","url":"/keep-theme/","content":"Themes | Hexo 提供了很多网站主题，Keep主题是我目前最喜欢，也最适合新手的一个主题（因为它的文档真的很详细！）\n","categories":["Technology"],"tags":["Tool"]},{"title":"Build your first blog with Hexo","url":"/firstblog/","content":"2022年之前的blog收录在gitee pages，网站为：https://liyang199802.gitee.io/，仍可访问。但是由于gitee现在对文件中的敏感词汇审查过于严格，导致检查文章中词汇耗费了大量时间，因此，今年开始使用github pages来维护个人blog，使用hexo构建个人网站的方法与使用gitee pages基本一致。\n另一方面，作为一个小白，搭建的blog很丑，虽然没有人看，自己记录也会影响心情。看到很多优质博客，决定改进一下自己的blog。\n\nWhy &amp; How？我自认为是一个喜欢记录但不喜欢反思的人。写blog既能让我记录自己的生活、经验和想法，也能方便自己回顾和整理自己的思路。工作之后，每天接触的新知识越来越多，生活上的感悟也越来越多，还是决定重新拿起键盘，开始记录自己的想法。写博客的初衷就是为了记录，不让自己遗忘，使用文本笔记或者PPT等图形工具不方便组织，且无法不方便同步共享，因此还是决定使用在线blog的形式，说起来又有点像十年前玩的QQ空间，hhh。\n本文之后的语言使用讲述式的方式，一方面记录自己在搭建blog时遇到的问题，另一方面可供小白参考，从零到一搭建一个属于自己的个人网站。\n首先，对本文所使用到的关键技术进行说明：\n\nHexo：这是一个基于Node.js的静态网站生成器，它可以帮助你方便地创建和管理自己的个人博客。它的使用方式类似于Jekyll、Hugo等其他静态网站生成器，可以通过设置主题、插件和其他配置来自定义自己的博客。Hexo具有快速、简单、易于扩展和使用等特点，目前被许多博客作者广泛采用。\nGitHub Pages：是一个网页托管服务，可以将静态网页或博客网站托管在GitHub上。通过使用GitHub Pages服务，你可以免费地创建自己的网站，并且可以使用自己的域名访问该网站。GitHub Pages支持多种技术堆栈，如HTML、CSS、JavaScript等，也可以集成Jekyll等博客生成器。通过将自己的代码托管到GitHub上，在代码更新时，GitHub Pages会自动刷新你的网站，使得网站的维护和更新变得更加方便和高效。因此，GitHub Pages是一个非常受欢迎的静态网页托管服务，也是许多程序员和博客作者常用的工具。\n\n利用这两个技术就能够免费地搭建一个属于自己的网站，如本站一样。\nHexo主要命令hexo常用的命令就以下6个：\n\nhexo init [folder]: 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站；\nhexo new file_name：新建一篇文章。\nhexo generate: 生成静态文件；\nhexo server: 启动服务器。默认情况下，访问网址为： http://localhost:4000/；\nhexo deploy: 部署网站（后文会用得）；\nhexo clean: 清除缓存文件 (db.json) 和 public 文件夹下已生成的静态文件。\n\n\n使用Hexo本地建站安装Hexo安装hexo十分简单，根据 Hexo 的官方文档 开始使用 — 概述，安装 Hexo 的前提是先安装 Node.js 和 Git，在安装完这两者后，安装 Hexo 很简单，只需在终端（cmd、Git bash、Node.js command prompt 均可）中敲入如下命令，回车等待安装完成。\nnpm install -g hexo-cli\n\n建立本地站点\nStep 1: 先在电脑中的某一位置建立好 your_name.github.io 文件夹，比如 D:\\Blog\\your_name.github.io；\n\nStep 2: 在终端（最好使用git bash）中切换到 your_name.github.io 文件夹所在的路径。\n\nStep 3: 由于默认的 NPM 镜像实在太慢太慢，我们把源替换成淘宝的镜像，在终端中执行如下命令：\nnpm config set registry &quot;https://registry.npm.taobao.org&quot;\n\nStep 4: 根据 Hexo 的官方文档 开始使用 — 建站，依次执行下面两条命令，建立我们的新网站：\nhexo initnpm install\n\n由于使用了淘宝的镜像，加载会很快。完成后，your_name.github.io 文件夹下面的目录如下：\n.├── _config.yml├── package.json├── scaffolds├── source|   └── _posts└── themes\n\n\n_config.yml 文件存放着网站的配置信息，可以在这里配置大部分的参数。\npackage.json 文件存放着插件信息，从中可以查看那些插件已经安装。\nscaffolds 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。\nsource 是存放用户资源的地方的文件夹，除 _posts 文件夹之外，开头命名为 _ (下划线) 的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。\nthemes 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题已经在里面了。\n\n\nStep 5: 根据 Hexo 的官方文档 开始使用 — 命令，在终端中敲入 hexo server 命令（确保路径仍在 your_name.github.io 下），可以在 http://localhost:4000/ 中看到我们网站默认的样子了。\n\n\n配置站点上节说到，_config.yml 文件存放了网站的配置信息。我们可以在 _config.yml 中大部份的配置，里面每一个参数的含义可以查看 Hexo 的官方文档 开始使用 — 配置 ，这里我暂且只修改了 title，subtitle 和 author，替换成自己网站的名字和作者名即可。\n如果有同学觉得默认的网址链接有点长，可以将 permalink 改成如下：\npermalink: :title/\n\nper_page 决定首页显示多少篇文章。其余的设置，比如 theme，deploy 我们之后用到了再来更改。\n编写blog内容新建一篇blog的方法有两种：\n\n一种是直接使用hexo提供的命令：\nhexo new 文章文件名\n\n执行完该命令，会在/source/_posts文件夹下产生一个Markdown文件，再去编辑内容即可。\n\n另外一种方法是在 _posts 文件夹下，新建一个 Markdown 文件，或者把你以前有的 Markdown 文件复制进来，根据 Hexo 的官方文档 基本操作 — Front-matter ，写好你的第一篇文章，比如：\ntitle: Test for Hexodate: 2016/12/7 20:46:25categories:- Diarytags:- PS3- Games---Hexo Test.\n\n这里，Front-matter 是文件最上方以 --- 分隔的区域，用于指定文章的标题、建立日期、更新日期等，如果主题模板还支持分类和标签的话（比如默认的 landscape 主题），还可以指定分类和标签。\n\n\n生成blog根据 Hexo 的官方文档 基本操作 — 生成文件，在终端中敲入如下命令：\nhexo generate\n\nHexo 会替我们刚加入到 _posts 文件夹下的 markdown 文件生成静态文件。运行 hexo server 可以在 http://localhost:4000/ 中看到我们新添加的网页内容了。至此，我们采用默认主题 landscape 的网站已经生成了。\n更换主题默认的主题landscape比较简单，hexo为我们提供了很多中网站主题（截至目前官方主题有384个），且都是开源的，我们可以根据自己的喜好选取并修改网站主题。Themes | Hexo 是hexo提供的官方主题，本站目前使用的是XPoet的keep主题，主打的就是一个简单优雅，哈哈哈，喜欢的小伙伴可以去keep主题使用指南上学习。\n以本站的keep theme为例：\n\n首先，安装keep主题\n\n如果你在使用 Hexo 5.0 或更高版本，最简单的安装方式是通过 NPM （推荐）\ncd hexo-sitenpm install hexo-theme-keep\n\n或者使用 Git 克隆整个仓库\ncd hexo-sitegit clone https://github.com/XPoet/hexo-theme-keep themes/keep\n\n\n然后，修改配置\n\nKeep 主题安装完成后，在 Hexo 配置文件 _config.yml 中将 theme 设置为 keep。\ntheme: keep\n\n\n\n如此，便可快速使用keep主题样式，其他更多的配置，详见下一篇blog——《Keep theme，simple and elegant》\n\n网站部署到GitHub部署到 Github 的命令行操作都在 Git Bash 中完成。事实上，这一环节非常简单，其实本质上就是一个 git push 操作，并且，hexo为我们提供的deploy命令将会更加方便。\n创建远程仓库要在 Github 上创建项目，当然首先需要注册 Github帐号。然后新建一个用于存放blog文件的仓库，要注意的是，Repository name 一定要是 your_name.github.io ，your_name 是你的 Github 用户名。另外，仓库的权限要是public的，否则，使用github page将会收费。\n登录Git根据 Github 的官方文档 Setting up Git，这一操作的目的是 Tell Git your name so your commits will be properly labeled 和 Tell Git the email address that will be associated with your Git commits，也就是告诉版本控制软件 Git 接下来这台电脑上提交的文件是 E-mail 地址是什么的谁谁谁提交的。在 Git Bash 中执行如下代码即可：\ngit config --global user.name &quot;YOUR NAME&quot;git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;\n\n其中，YOUR NAME 是自己取的名字，YOUR EMAIL ADDRESS 是自己的邮箱。由于自己的博客网站就自己一个人提交，所以就都设置成跟 Github 用户名和邮箱相同了。但其实是可以不同的，因为对于很多项目，并不只有一个开发者，Github 允许多人向同一个 Repo 提交，这里提供用户名和邮箱，只是为了搞清楚哪些代码是谁谁谁提交的。\n身份认证我们的最终目的是实现在终端中敲入 hexo deploy 后，Hexo 会将我们本地的 public 文件夹下的东西上传到 Github 服务器，这样我们就可以通过 your_name.github.io 这个域名（your_name 是你的 Github 用户名）看到我们已经上网的博客网站了。\n为了实现这个目的，首先我们先要让本地的电脑和 Github 服务器建立起某种联系，也就是让 Github 服务器信任由我这台电脑提交的东西，接受，并存放到 your_name.github.io 这个 Repo 下面，与 Github 服务器建立信任的这个环节就是身份认证（Authenticating ）。根据 Github 的官方文档 Authenticating with GitHub from Git 这里，我们选择 Connecting over SSH 这一种方式。在 Github 的官方文档 Categories &#x2F; SSH 下，我们能找到关于 Github 与 SSH 的资料。\n生成新的 SSH key根据 Github 的官方文档 Generating a new SSH key ， 我们在 Git Bash 下执行如下命令，生成 SSH key\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n\n其中，your_email@example.com 是你的 Github 注册邮箱。然后，Git Bash 中会出现\nGenerating public/private rsa key pair.\n\n表示新的 SSH 已经生成了。随后会出现\nEnter a file in which to save the key(/Users/you/.ssh/id_rsa): [Press enter]\n\n这里 id_rsa 是生成的 key 文件的文件名，默认都是这个；如果不是，在后面用到 id_rsa 的地方请替换成出现的名字。这条信息是让你选择 SSH key 存放的地点，按回车选择默认的即可。回车后，还会出现\nEnter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]\n\n让你设置使用 SSH 密钥时的密码，由于我们都是在自己个人的电脑上操作，所以仍然回车，不设置密码即可。\n将 SSH key 添加到 ssh-agentssh-agent 是一个在本地登录会话持续时间内，将未加密的密钥存储在内存中，并使用 Unix 域套接字与 SSH 客户端进行通信的程序。根据 Github 的官方文档 Adding your SSH key to the ssh-agent ， 我们在 Git Bash 下执行如下命令，开启 ssh-agent\neval &quot;$(ssh-agent -s)&quot;\n\n然后我们要将这个 SSH key 添加到 ssh-agent 里去，运行如下命令，其中 id_rsa 是你的 key 文件的文件名：\nssh-add ~/.ssh/id_rsa\n\n将 SSH key 添加到 Github 账户Github 的官方文档 Adding a new SSH key to your GitHub account 已经图文并茂将如何在 Github帐号中添加 SSH 介绍的非常清楚了。先是在 Git Bash 中将 SSH Key 拷贝出来：\n$ clip &lt; ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your clipboard\n\nid_rsa 是你刚才的 SSH Key 文件。此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，依次点击自己的头像，Settings，SSH and GPG keys，New SSH key 或者 Add SSH key， 在 Title 这里输入 Key 的label，比如 your_name - PC，然后在 Key 里面把 SSH Key 粘贴进去，点击 Add SSH key 大功告成。\n以上部分就是在生成身份认证的凭证 SSH key，分别放在自己本地电脑和 Github 服务器上，以后向 Github 提交内容的时候，两者的 Key 匹配就可以了，省去了我们每次输密码的时间。\n测试 SSH 连接在大功告成之前，为了稳妥起见，我们来测试一下自己跟 Github 服务器 SSH 连接是否已经建立起来了。Github 的官方文档 Testing your SSH connection 已经将次环节介绍得非常详细了。我们要做得就是在 Git Bash 中敲入\nssh -T git@github.com\n\n你可能会看到类似于\nThe authenticity of host &#x27;github.com (192.30.252.1)&#x27; can&#x27;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?\n\n没关系的，输入 yes 敲回车，就可以看到如下的成功信息了\nHi username! You&#x27;ve successfully authenticated, but GitHub does notprovide shell access.\n\n至此为止，我们已经建立起了跟 Github 服务器的连接。其实我们也可以用 git push 命令，提交 public 文件夹下面的内容，不过 Hexo 更我们提供了更方便的途径。\nHexo 部署Hexo 提供了 hexo deploy 命令，可以方便地将整个 public 文件夹部署到 Github 服务器上去。根据 Hexo 的官方文档 基本操作 — 部署 我们只需要做以下两步：\n\nStep 1: 在终端中运行如下命令，安装 hexo-deployer-git 插件：\n\nnpm install hexo-deployer-git --save\n\n\nStep 2: 在 _config.yml 中修改参数，如下所示：\ndeploy:  type: git  repo: https://github.com/your_name/your_name.github.io.git  branch: master\n\n其中，your_name 是你的 Github 帐号名。repo 对应的是你 your_name.github.io 这个项目的库（Repository）地址，进入这个项目的主页，点击 Clone or download 下拉菜单也能看到。branch 是分支名称，如果使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测，通常都是 master。 注意，冒号后的空格非常重要，一定要有！\n在第一次部署的时候，Github 还会跳出来一个小窗口，让你输入 Github 帐号和密码，输入即可。\n\n\n博客第一次创建，即使 deploy 成功了，但仍然不会立刻可以访问，还需要等待 15 分钟以上。可以使用如下方法，让blog的内容快速更新：\n\nStep 1: 到 your_name.github.io 项目的 Github 主页，上方最右侧有一个 Settings，点击 Settings，拉到 Pages，在Build and deployment选项下有一个branch选项，选择部署的分支(master&#x2F;(root))，点击save，就能够看到your_name.github.io 可以访问了。\nStep 2: 再试着 hexo deploy 一次，如果页面正常了那就大功告成了，假使遇到 Permission Denied，再 hexo deploy 一次就好。\n\n到目前为止，我们的blog就已经搭建好了，可以根据生成的网址进行访问，如本站网址：https://lucky-carp.github.io/。当然，有些同学可能希望能够在浏览器中输入自己的域名，比如 your.site，就可以看到自己的网站。这就需要绑定自己的独立域名，本站在写本篇文章的时候还未绑定域名，但在此也进行说明，以便后续绑定域名。\n\n绑定独立域名购买域名域名提供商非常多，比如 Godaddy、 DNSPod 和 Gandi ，这三者都支持支付宝付款。我预计要在Gandi 上购买域名：luckycarp.me。域名注册很简单，不过需要特别注意的是，虽然 Gandi 提供了简体中文的界面，但填写注册信息的时候，一定要填英文字符！！！。输入中文也能够注册成功，但坑的是什么呢？在你付完款以后，会域名创建不成功，原因卡在比如地址信息中的中文字符集超出范围了。遇上了这种情况，也不要慌，在 Gandi 的 账户管理 中的 更新账户资讯 中把中文字符改成英文的，然后再在 服务 中的 域名 这里点击类似重启该操作字样的按钮即可。至此，第一步购买域名已经完成。\n\nStep 1: 告诉 Github your_name.github.io 对应哪个域名\n\n在 source 文件夹下添加一个 CNAME 文件，里面就一行内容，写上自己的域名，比如 your.site。 在终端中运行\nhexo generate\n\nHexo 在生成 public 文件夹内容的时候，会自动把 CNAME 文件复制过去，这样，public 文件夹下就也有 CNAME 文件了。再运行\nhexo deploy\n\n将其部署到 Github，让 Github 知道 your_name.github.io 对应哪个域名。\n\n\n\nStep 2: 告诉 Gandi 我要用 DNSPod 解析域名\n登录 Gandi，点击 服务 中的 域名 中你购买的域名，进入 域名 &gt; your.site 页面，your.site 是你购买的域名，在网页的下方找到 修改伺服器，点击进入。删掉 Gandi 原来自带的 3 个 DNS 服务器地址，填入 DNSPod 的域名服务器。那 DNSPod 的域名服务器是什么呢？在 DNSPod 的官方文档 DNSPod 各个套餐的 DNS 地址 中可以知道，DNSPod 免费 DNS 服务器的地址为：f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net。在 Gandi 那里把这两个地址依次填入，保存。\n\nStep 3: 告诉 DNSPod 域名对应的网站存放在哪台服务器上\nDNSPod 的官方文档 学会使用 DNSPod，仅需三步 已经图文并茂的将如何告诉 DNSPod 域名对应的网站存放在哪台服务器上介绍地非常详细了。在注册完 DNSPod 后，点击 添加域名，添加上自己购买的域名，点击 确定，再点击刚添加的域名，在域名记录管理界面，点击 添加记录，添加两条 A 记录即可。\n\n其中，192.30.252.153 和 192.30.252.154 为 GIthub 服务器的 IP 地址，可以从 Github 的官方文档 Configuring A records with your DNS provider 知道。DNSPod 域名解析生效非常快，只要等待十来秒即可用自己的域名访问了。至此，拥有独立域名的博客网站都已经搭建完了。\n\n\n参考\n本文主要参考了Grok的blog：《用Hexo搭建博客》\n\n","categories":["Technology"],"tags":["Tool"]}]