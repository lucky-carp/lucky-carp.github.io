[{"title":"ClickHouse——基础学习","url":"/clickhouse-base/","content":"本篇记录了clickhouse的基础知识，用于回顾。\n","categories":["Technology"],"tags":["knowledge"]},{"title":"Training day——练胸（0508）","url":"/fitness0508/","content":"私教课的第二节，今天练胸！\n","categories":["Life"],"tags":["Fitness"]},{"title":"Food Sharing——天宝兄弟罗氏虾","url":"/roche-shrimp/","content":"天宝兄弟的罗氏虾在长沙这个遍地小龙虾的地盘竟然能做到一绝，让我跟鹿崽流连忘返，必有它的绝佳秘方，但是一盘一斤的罗氏虾能卖到228，活虾也才80一斤，为了减少消费，拴住老婆的胃，这菜我必须学会！\n","categories":["Life"],"tags":["Cooking"]},{"title":"Build your first blog with Hexo","url":"/firstblog/","content":"2022年之前的blog收录在gitee pages，网站为：https://liyang199802.gitee.io/，仍可访问。但是由于gitee现在对文件中的敏感词汇审查过于严格，导致检查文章中词汇耗费了大量时间，因此，今年开始使用github pages来维护个人blog，使用hexo构建个人网站的方法与使用gitee pages基本一致。\n另一方面，作为一个小白，搭建的blog很丑，虽然没有人看，自己记录也会影响心情。看到很多优质博客，决定改进一下自己的blog。\n\nWhy &amp; How？我自认为是一个喜欢记录但不喜欢反思的人。写blog既能让我记录自己的生活、经验和想法，也能方便自己回顾和整理自己的思路。工作之后，每天接触的新知识越来越多，生活上的感悟也越来越多，还是决定重新拿起键盘，开始记录自己的想法。写博客的初衷就是为了记录，不让自己遗忘，使用文本笔记或者PPT等图形工具不方便组织，且无法不方便同步共享，因此还是决定使用在线blog的形式，说起来又有点像十年前玩的QQ空间，hhh。\n本文之后的语言使用讲述式的方式，一方面记录自己在搭建blog时遇到的问题，另一方面可供小白参考，从零到一搭建一个属于自己的个人网站。\n首先，对本文所使用到的关键技术进行说明：\n\nHexo：这是一个基于Node.js的静态网站生成器，它可以帮助你方便地创建和管理自己的个人博客。它的使用方式类似于Jekyll、Hugo等其他静态网站生成器，可以通过设置主题、插件和其他配置来自定义自己的博客。Hexo具有快速、简单、易于扩展和使用等特点，目前被许多博客作者广泛采用。\nGitHub Pages：是一个网页托管服务，可以将静态网页或博客网站托管在GitHub上。通过使用GitHub Pages服务，你可以免费地创建自己的网站，并且可以使用自己的域名访问该网站。GitHub Pages支持多种技术堆栈，如HTML、CSS、JavaScript等，也可以集成Jekyll等博客生成器。通过将自己的代码托管到GitHub上，在代码更新时，GitHub Pages会自动刷新你的网站，使得网站的维护和更新变得更加方便和高效。因此，GitHub Pages是一个非常受欢迎的静态网页托管服务，也是许多程序员和博客作者常用的工具。\n\n利用这两个技术就能够免费地搭建一个属于自己的网站，如本站一样。\nHexo主要命令hexo常用的命令就以下6个：\n\nhexo init [folder]: 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站；\nhexo new file_name：新建一篇文章。\nhexo generate: 生成静态文件；\nhexo server: 启动服务器。默认情况下，访问网址为： http://localhost:4000/；\nhexo deploy: 部署网站（后文会用得）；\nhexo clean: 清除缓存文件 (db.json) 和 public 文件夹下已生成的静态文件。\n\n\n使用Hexo本地建站安装Hexo安装hexo十分简单，根据 Hexo 的官方文档 开始使用 — 概述，安装 Hexo 的前提是先安装 Node.js 和 Git，在安装完这两者后，安装 Hexo 很简单，只需在终端（cmd、Git bash、Node.js command prompt 均可）中敲入如下命令，回车等待安装完成。\nnpm install -g hexo-cli\n\n建立本地站点\nStep 1: 先在电脑中的某一位置建立好 your_name.github.io 文件夹，比如 D:\\Blog\\your_name.github.io；\n\nStep 2: 在终端（最好使用git bash）中切换到 your_name.github.io 文件夹所在的路径。\n\nStep 3: 由于默认的 NPM 镜像实在太慢太慢，我们把源替换成淘宝的镜像，在终端中执行如下命令：\nnpm config set registry &quot;https://registry.npm.taobao.org&quot;\n\nStep 4: 根据 Hexo 的官方文档 开始使用 — 建站，依次执行下面两条命令，建立我们的新网站：\nhexo initnpm install\n\n由于使用了淘宝的镜像，加载会很快。完成后，your_name.github.io 文件夹下面的目录如下：\n.├── _config.yml├── package.json├── scaffolds├── source|   └── _posts└── themes\n\n\n_config.yml 文件存放着网站的配置信息，可以在这里配置大部分的参数。\npackage.json 文件存放着插件信息，从中可以查看那些插件已经安装。\nscaffolds 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。\nsource 是存放用户资源的地方的文件夹，除 _posts 文件夹之外，开头命名为 _ (下划线) 的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。\nthemes 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题已经在里面了。\n\n\nStep 5: 根据 Hexo 的官方文档 开始使用 — 命令，在终端中敲入 hexo server 命令（确保路径仍在 your_name.github.io 下），可以在 http://localhost:4000/ 中看到我们网站默认的样子了。\n\n\n配置站点上节说到，_config.yml 文件存放了网站的配置信息。我们可以在 _config.yml 中大部份的配置，里面每一个参数的含义可以查看 Hexo 的官方文档 开始使用 — 配置 ，这里我暂且只修改了 title，subtitle 和 author，替换成自己网站的名字和作者名即可。\n如果有同学觉得默认的网址链接有点长，可以将 permalink 改成如下：\npermalink: :title/\n\nper_page 决定首页显示多少篇文章。其余的设置，比如 theme，deploy 我们之后用到了再来更改。\n编写blog内容新建一篇blog的方法有两种：\n\n一种是直接使用hexo提供的命令：\nhexo new 文章文件名\n\n执行完该命令，会在/source/_posts文件夹下产生一个Markdown文件，再去编辑内容即可。\n\n另外一种方法是在 _posts 文件夹下，新建一个 Markdown 文件，或者把你以前有的 Markdown 文件复制进来，根据 Hexo 的官方文档 基本操作 — Front-matter ，写好你的第一篇文章，比如：\ntitle: Test for Hexodate: 2016/12/7 20:46:25categories:- Diarytags:- PS3- Games---Hexo Test.\n\n这里，Front-matter 是文件最上方以 --- 分隔的区域，用于指定文章的标题、建立日期、更新日期等，如果主题模板还支持分类和标签的话（比如默认的 landscape 主题），还可以指定分类和标签。\n\n\n生成blog根据 Hexo 的官方文档 基本操作 — 生成文件，在终端中敲入如下命令：\nhexo generate\n\nHexo 会替我们刚加入到 _posts 文件夹下的 markdown 文件生成静态文件。运行 hexo server 可以在 http://localhost:4000/ 中看到我们新添加的网页内容了。至此，我们采用默认主题 landscape 的网站已经生成了。\n更换主题默认的主题landscape比较简单，hexo为我们提供了很多中网站主题（截至目前官方主题有384个），且都是开源的，我们可以根据自己的喜好选取并修改网站主题。Themes | Hexo 是hexo提供的官方主题，本站目前使用的是XPoet的keep主题，主打的就是一个简单优雅，哈哈哈，喜欢的小伙伴可以去keep主题使用指南上学习。\n以本站的keep theme为例：\n\n首先，安装keep主题\n\n如果你在使用 Hexo 5.0 或更高版本，最简单的安装方式是通过 NPM （推荐）\ncd hexo-sitenpm install hexo-theme-keep\n\n或者使用 Git 克隆整个仓库\ncd hexo-sitegit clone https://github.com/XPoet/hexo-theme-keep themes/keep\n\n\n然后，修改配置\n\nKeep 主题安装完成后，在 Hexo 配置文件 _config.yml 中将 theme 设置为 keep。\ntheme: keep\n\n\n\n如此，便可快速使用keep主题样式，其他更多的配置，详见下一篇blog——《Keep theme，simple and elegant》\n\n网站部署到GitHub部署到 Github 的命令行操作都在 Git Bash 中完成。事实上，这一环节非常简单，其实本质上就是一个 git push 操作，并且，hexo为我们提供的deploy命令将会更加方便。\n创建远程仓库要在 Github 上创建项目，当然首先需要注册 Github帐号。然后新建一个用于存放blog文件的仓库，要注意的是，Repository name 一定要是 your_name.github.io ，your_name 是你的 Github 用户名。另外，仓库的权限要是public的，否则，使用github page将会收费。\n登录Git根据 Github 的官方文档 Setting up Git，这一操作的目的是 Tell Git your name so your commits will be properly labeled 和 Tell Git the email address that will be associated with your Git commits，也就是告诉版本控制软件 Git 接下来这台电脑上提交的文件是 E-mail 地址是什么的谁谁谁提交的。在 Git Bash 中执行如下代码即可：\ngit config --global user.name &quot;YOUR NAME&quot;git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;\n\n其中，YOUR NAME 是自己取的名字，YOUR EMAIL ADDRESS 是自己的邮箱。由于自己的博客网站就自己一个人提交，所以就都设置成跟 Github 用户名和邮箱相同了。但其实是可以不同的，因为对于很多项目，并不只有一个开发者，Github 允许多人向同一个 Repo 提交，这里提供用户名和邮箱，只是为了搞清楚哪些代码是谁谁谁提交的。\n身份认证我们的最终目的是实现在终端中敲入 hexo deploy 后，Hexo 会将我们本地的 public 文件夹下的东西上传到 Github 服务器，这样我们就可以通过 your_name.github.io 这个域名（your_name 是你的 Github 用户名）看到我们已经上网的博客网站了。\n为了实现这个目的，首先我们先要让本地的电脑和 Github 服务器建立起某种联系，也就是让 Github 服务器信任由我这台电脑提交的东西，接受，并存放到 your_name.github.io 这个 Repo 下面，与 Github 服务器建立信任的这个环节就是身份认证（Authenticating ）。根据 Github 的官方文档 Authenticating with GitHub from Git 这里，我们选择 Connecting over SSH 这一种方式。在 Github 的官方文档 Categories &#x2F; SSH 下，我们能找到关于 Github 与 SSH 的资料。\n生成新的 SSH key根据 Github 的官方文档 Generating a new SSH key ， 我们在 Git Bash 下执行如下命令，生成 SSH key\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n\n其中，your_email@example.com 是你的 Github 注册邮箱。然后，Git Bash 中会出现\nGenerating public/private rsa key pair.\n\n表示新的 SSH 已经生成了。随后会出现\nEnter a file in which to save the key(/Users/you/.ssh/id_rsa): [Press enter]\n\n这里 id_rsa 是生成的 key 文件的文件名，默认都是这个；如果不是，在后面用到 id_rsa 的地方请替换成出现的名字。这条信息是让你选择 SSH key 存放的地点，按回车选择默认的即可。回车后，还会出现\nEnter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]\n\n让你设置使用 SSH 密钥时的密码，由于我们都是在自己个人的电脑上操作，所以仍然回车，不设置密码即可。\n将 SSH key 添加到 ssh-agentssh-agent 是一个在本地登录会话持续时间内，将未加密的密钥存储在内存中，并使用 Unix 域套接字与 SSH 客户端进行通信的程序。根据 Github 的官方文档 Adding your SSH key to the ssh-agent ， 我们在 Git Bash 下执行如下命令，开启 ssh-agent\neval &quot;$(ssh-agent -s)&quot;\n\n然后我们要将这个 SSH key 添加到 ssh-agent 里去，运行如下命令，其中 id_rsa 是你的 key 文件的文件名：\nssh-add ~/.ssh/id_rsa\n\n将 SSH key 添加到 Github 账户Github 的官方文档 Adding a new SSH key to your GitHub account 已经图文并茂将如何在 Github帐号中添加 SSH 介绍的非常清楚了。先是在 Git Bash 中将 SSH Key 拷贝出来：\n$ clip &lt; ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your clipboard\n\nid_rsa 是你刚才的 SSH Key 文件。此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，依次点击自己的头像，Settings，SSH and GPG keys，New SSH key 或者 Add SSH key， 在 Title 这里输入 Key 的label，比如 your_name - PC，然后在 Key 里面把 SSH Key 粘贴进去，点击 Add SSH key 大功告成。\n以上部分就是在生成身份认证的凭证 SSH key，分别放在自己本地电脑和 Github 服务器上，以后向 Github 提交内容的时候，两者的 Key 匹配就可以了，省去了我们每次输密码的时间。\n测试 SSH 连接在大功告成之前，为了稳妥起见，我们来测试一下自己跟 Github 服务器 SSH 连接是否已经建立起来了。Github 的官方文档 Testing your SSH connection 已经将次环节介绍得非常详细了。我们要做得就是在 Git Bash 中敲入\nssh -T git@github.com\n\n你可能会看到类似于\nThe authenticity of host &#x27;github.com (192.30.252.1)&#x27; can&#x27;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?\n\n没关系的，输入 yes 敲回车，就可以看到如下的成功信息了\nHi username! You&#x27;ve successfully authenticated, but GitHub does notprovide shell access.\n\n至此为止，我们已经建立起了跟 Github 服务器的连接。其实我们也可以用 git push 命令，提交 public 文件夹下面的内容，不过 Hexo 更我们提供了更方便的途径。\nHexo 部署Hexo 提供了 hexo deploy 命令，可以方便地将整个 public 文件夹部署到 Github 服务器上去。根据 Hexo 的官方文档 基本操作 — 部署 我们只需要做以下两步：\n\nStep 1: 在终端中运行如下命令，安装 hexo-deployer-git 插件：\n\nnpm install hexo-deployer-git --save\n\n\nStep 2: 在 _config.yml 中修改参数，如下所示：\ndeploy:  type: git  repo: https://github.com/your_name/your_name.github.io.git  branch: master\n\n其中，your_name 是你的 Github 帐号名。repo 对应的是你 your_name.github.io 这个项目的库（Repository）地址，进入这个项目的主页，点击 Clone or download 下拉菜单也能看到。branch 是分支名称，如果使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测，通常都是 master。 注意，冒号后的空格非常重要，一定要有！\n在第一次部署的时候，Github 还会跳出来一个小窗口，让你输入 Github 帐号和密码，输入即可。\n\n\n博客第一次创建，即使 deploy 成功了，但仍然不会立刻可以访问，还需要等待 15 分钟以上。可以使用如下方法，让blog的内容快速更新：\n\nStep 1: 到 your_name.github.io 项目的 Github 主页，上方最右侧有一个 Settings，点击 Settings，拉到 Pages，在Build and deployment选项下有一个branch选项，选择部署的分支(master&#x2F;(root))，点击save，就能够看到your_name.github.io 可以访问了。\nStep 2: 再试着 hexo deploy 一次，如果页面正常了那就大功告成了，假使遇到 Permission Denied，再 hexo deploy 一次就好。\n\n到目前为止，我们的blog就已经搭建好了，可以根据生成的网址进行访问，如本站网址：https://lucky-carp.github.io/。当然，有些同学可能希望能够在浏览器中输入自己的域名，比如 your.site，就可以看到自己的网站。这就需要绑定自己的独立域名，本站在写本篇文章的时候还未绑定域名，但在此也进行说明，以便后续绑定域名。\n\n绑定独立域名购买域名域名提供商非常多，比如 Godaddy、 DNSPod 和 Gandi ，这三者都支持支付宝付款。我预计要在Gandi 上购买域名：luckycarp.me或者luckycarp.xyz。但是发现GoDadday上的域名售价更加便宜。域名注册很简单，不过需要特别注意的是，虽然 Gandi 提供了简体中文的界面，但填写注册信息的时候，一定要填英文字符！！！。输入中文也能够注册成功，但坑的是什么呢？在你付完款以后，会域名创建不成功，原因卡在比如地址信息中的中文字符集超出范围了。遇上了这种情况，也不要慌，在 Gandi 的 账户管理 中的 更新账户资讯 中把中文字符改成英文的，然后再在 服务 中的 域名 这里点击类似重启该操作字样的按钮即可。至此，第一步购买域名已经完成。\n\nStep 1: 告诉 Github your_name.github.io 对应哪个域名\n\n在 source 文件夹下添加一个 CNAME 文件，里面就一行内容，写上自己的域名，比如 your.site。 在终端中运行\nhexo generate\n\nHexo 在生成 public 文件夹内容的时候，会自动把 CNAME 文件复制过去，这样，public 文件夹下就也有 CNAME 文件了。再运行\nhexo deploy\n\n将其部署到 Github，让 Github 知道 your_name.github.io 对应哪个域名。\n\n\n\nStep 2: 告诉 Gandi 我要用 DNSPod 解析域名\n登录 Gandi，点击 服务 中的 域名 中你购买的域名，进入 域名 &gt; your.site 页面，your.site 是你购买的域名，在网页的下方找到 修改伺服器，点击进入。删掉 Gandi 原来自带的 3 个 DNS 服务器地址，填入 DNSPod 的域名服务器。那 DNSPod 的域名服务器是什么呢？在 DNSPod 的官方文档 DNSPod 各个套餐的 DNS 地址 中可以知道，DNSPod 免费 DNS 服务器的地址为：f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net。在 Gandi 那里把这两个地址依次填入，保存。\n\nStep 3: 告诉 DNSPod 域名对应的网站存放在哪台服务器上\nDNSPod 的官方文档 学会使用 DNSPod，仅需三步 已经图文并茂的将如何告诉 DNSPod 域名对应的网站存放在哪台服务器上介绍地非常详细了。在注册完 DNSPod 后，点击 添加域名，添加上自己购买的域名，点击 确定，再点击刚添加的域名，在域名记录管理界面，点击 添加记录，添加两条 A 记录即可。\n\n其中，192.30.252.153 和 192.30.252.154 为 GIthub 服务器的 IP 地址，可以从 Github 的官方文档 Configuring A records with your DNS provider 知道。DNSPod 域名解析生效非常快，只要等待十来秒即可用自己的域名访问了。至此，拥有独立域名的博客网站都已经搭建完了。\n\n\n参考\n本文主要参考了Grok的blog：《用Hexo搭建博客》\n\n","categories":["Technology"],"tags":["Tool"]},{"title":"Keep——A simple and elegant theme for Hexo.","url":"/keep-theme/","content":"Themes | Hexo 提供了很多网站主题，Keep主题是我目前最喜欢，也我认为最适合新手的一个主题（因为它的文档真的很详细！）\n本篇博客主要记录了我使用keep主题时的配置，hexo的主题自由度很高，大家也可以根据个人喜好在此基础上构建漂亮的blog。\n\n本篇涉及到的几个工具：\n\nHexo：Hexo是一个基于Node.js的静态博客框架，可以使用Markdown格式的文本快速创建个人博客并轻松发布到网络。Hexo提供了许多有用的功能，例如多语言支持、主题和插件、自动化部署等，可以帮助用户建立一个美观、高效、易用的个人博客网站。同时，由于Hexo生成的是静态页面，因此具有快速、安全和稳定的特点。详见Hexo官网。\nKeep theme：一个hexo网站主题，详见keep主题使用指南，特点有：\n极致体验（Keep 主题拥有更加合理的源代码组织形式，给你带来极致的页面加载体验。）\n简约至上（不管后续如何变化，Keep 主题始终围绕「 简约、轻快 」来维护和升级。）\n化繁为简（只需简单配置就能有强大功能，让我们专注写作内容，找回写博客的初衷。）\n\n\nPicX：PicX是一款图床工具，也是一个开源的图片存储服务，可以轻松地将图片上传到云端，同时也可以方便地分享和管理图片。PicX支持多种上传方式，例如直接拖拽上传、剪贴板上传、API上传等，还可以自定义上传空间、图片大小、缩略图等参数。使用PicX可以避免自己的服务器上存储过多的图片，使网站加载速度更快，同时也可以享受到云服务带来的便利和安全性。详见PicX官网。\nvaline：Valine是一个基于LeanCloud的无后端评论系统，它是一款轻量级、快速、简单而强大的评论系统，支持一键集成到各种静态博客或网站中。Valine整合了LeanCloud的存储和访问速度快、具有良好的安全性能的优点，支持多语言、支持评论表情、评论邮件提醒、验证码等功能。同时，Valine采用了前端渲染和AJAX异步请求的方式，使得对服务器的压力较小，并且具有良好的扩展性能。Valine现已成为许多使用静态博客框架的开发者的常用工具。详见valine官网。\n\n\n安装主题在使用 Keep 主题之前，如果你对 Hexo 搭建个人博客没有任何经验，建议你可以先简要阅读 「 Easy Hexo 团队 」撰写的 Hexo 教程，能帮助你快速入门 Hexo。\n安装\n如果你在使用 Hexo 5.0 或更高版本，最简单的安装方式是通过 NPM （推荐）\ncd hexo-sitenpm install hexo-theme-keep\n\n或者使用 Git 克隆整个仓库\ncd hexo-sitegit clone https://github.com/XPoet/hexo-theme-keep themes/keep\n\n\n使用Keep 主题安装完成后，在 Hexo 配置文件（站点配置文件） _config.yml 中将 theme 设置为 keep。\ntheme: keep\n\n\n注意：使用 Keep 主题必须确保你的 Node.js 版本 &gt;&#x3D; 14.0，当你的 Hexo 项目运行时报错或发出警告，请注意升级你的 Node.js 版本。\n\n\n更新Keep 主题不定期发布新版本，你可以通过如下命令更新。\n\n通过 NPM 安装最新版本 （推荐）\ncd hexo-sitenpm install hexo-theme-keep@latest\n\n通过 Git 更新到最新的 master 分支\ncd themes/keepgit pull\n\n\nKeep 主题快速启动模板Keep 主题官方提供了基于 Hexo 博客框架的快速启动模板，启动模板中的 Hexo 配置文件 _config.yml 和主题配置文件 source/_data/keep.yml 已预设和启用一些比较实用的基础配置项。\n我们可以直接拿来快速创建一个 Hexo 博客项目，无需其他操作，开箱即用，然后在此模板基础上配置出属于自己的独一无二的 Keep 主题博客。（非常适合新手同学）\n下载模板使用 Git 克隆：\ngit clone https://github.com/theme-keep/hexo-theme-keep-starter\n\n直接下载：\n点击这里下载 &gt;&gt; Keep 主题快速启动模板\n\n安装依赖「 Keep 主题快速启动模板 」下载完成之后，需要安装项目依赖才能成功运行起来。\ncd hexo-theme-keep-starternpm install\n\n\n运行项目项目依赖安装成功之后，使用如下命令即可运行项目，随即在浏览器上看到 Keep 主题的 Hexo 博客。\nnpm run server\n\n\n配置主题至此，我们可以直接在此模板上自由配置 Keep 主题，最后编译生成静态文件 -&gt; 部署发布。\n注意：为确保你的主题配置项完全生效，请在 source/_data/keep.yml 路径下进行主题配置。\n\n请勿随意移动 keep.yml 文件的路径，确保 keep.yml 在 source/_data/ 路径下。请勿随意更改 keep.yml 文件中的配置项字段名称，填写配置项之后，确保缩进是否正确。\n\n# 编译生成静态文件npm run build# 部署npm run deploy\n\n\n我们现在已经可以使用keep主题作为我们网站的样式了，接下来对详细配置项进行说明，从而构建更加符合个人审美的网站，毕竟我们现在做的个人博客也是为了让自己开心嘛！\n\nkeep theme配置项base_infobase_info 配置项用于设置你的博客站点基本信息，请正确填写。\nbase_info:  title: Keep Theme  author: Keep Team  url: https://keep.xpoet.cn/\n\n\ntitle\ntitle 用于设置博客站点的标题，将显示在网站的头部，如下图。\n\n\nauthor\nauthor 用于设置博客站点的作者昵称，显示在网站底部、文章内容页和版权信息，如下图。\n\n网站底部\n\n\n文章内容页\n\n\n版本信息\n\n\n\n\n\n\nstylestyle 配置项用于自定义配置 Keep 主题的样式，通过这里你可以配置出属于你自己独一无二的 Keep 主题博客站点。\nstyle:  primary_color: &quot;#0066cc&quot;  logo: /images/logo.svg  favicon: /images/logo.svg  avatar: /images/avatar.svg  font_size:  font_family:  hover:    shadow: false    scale: false  first_screen:    enable: false    header_transparent: false    background_img: /images/bg.svg    description: Keep writing and Keep loving.    font_color:    hitokoto: false  scroll:    progress_bar: false    percent: false\n\n\nprimary_color\nprimary_color 用于设置博客站点主题色，支持 十六进制、rgb 和 rgba 颜色格式。例如：#0066cc、rgb(0, 102, 204) 和 rgba(0, 102, 204, 0.8)、。\n获取配色推荐：\n\nFlat UI Colors\nWeb 安全色\nAdobe Color CC\n\n\nlogo\nlogo 用于设置博客站点头部 LOGO，如下图。\n\n关于图片的设置：\n你可以使用 本地图片（即存储 keep/source/images/ 路径下的图片）或 图片外链 URL（适用于使用 NPM 安装的 Keep主题）。最开始我使用本地图片上传的方式，图片加载实在太慢了，于是尝试使用了PicX图床的方式。\n\n本地图片\nlogo: /images/logo.svg\n\n图片外链（推荐）\nlogo: https://cdn.staticaly.com/gh/XPoet/image-hosting@master/hexo-theme-keep/logo.7ihwqpf2atg0.svg\n\n\n图床推荐\n大家可以使用免费的图床工具 PicX 来存储自己的图片并生成图片外链。PicX: https://github.com/XPoet/picx\n\n\n往下的 favicon、avatar、favicon、first_screen.background_img 等配置项的图片设置均使用以上方式。\n\n\n\nfavicon\n 用于设置博客站点 favicon 图标。\n\navatar \n用于设置博客站点作者头像，将显示在文章内容页。\n\nfont_size\nfont_size 设置博客站点的初始字体大小，单位必须为 px 。该配置项可以不填，如果不填将使用 Keep 主题内置的初始字体大小 15.2px 。\n\nfont_family\nfont_family 设置博客站点的字体样式，该配置项可以不填，如果不填将使用 Keep 主题内置的字体样式。\n\nfont_family 同 CSS 设置 font-family 规则一致\n\n  # 设置：楷体font_family: STKaiti # 设置：宋体，黑体font_family: STSong, STHeiti\n\nhover\nhover 用于设置鼠标悬浮时的样式（例如悬浮在主页文章模块、TOC 目录模块、按钮等），可分别开启 shadow 和 scale 效果。\n\nfirst_screen\nfirst_screen 是 Keep 主题 v3.0.0 新增的首屏模块，开启后将显示在博客站点首页的第一视野（故称首屏）\n\nheader_transparent\nheader_transparent 用于在首屏模块开启状态下设置头部是否透明，可选值：true 或 false。\n\nbackground_img\nbackground_img 设置首屏背景图片，可使用 本地图片 或 图片外链 URL。\n\n这里建议大家的高清背景图片用 TinyPNG 压缩一下后再使用，可有效提高页面加载速度。\n\n\ndescription\ndescription 设置首屏描述，支持设置两行，换行符 **||**。\n\nfont_color\nfont_color 设置首屏描述的字体颜色，可以为空，不填则使用 Keep 主题内置颜色。\n\nhitokoto\nhitokoto 是 Keep 主题 v3.4.6新增的首屏描述一言功能，可选值：true 或 false。\n开启之后，在每次进入博客站点或刷新页面都会自动呈现出不一样的首屏描述。\n\nscroll\nscroll 设置页面滚动时的样式。\n\nprogress_bar\nprogress_bar 页面滚动时在网站顶部显示滚动进度条，可选值：true 或 false。\n\npercent\npercent 页面滚动时在右下角工具栏显示滚动百分比，可选值：true 或 false。\n\n\n\nmenumenu 用于配置博客站点的头部导航菜单，如需新增导航菜单，按配置文件里面的格式填写即可。\nmenu:  Home: /                         # 首页  Archives: /archives             # 归档  # Tags: /tags                   # 标签  # Categories: /categories       # 分类  # Links: /links                 # 链接  # About: /about                 # 关于  # ...\n\n\nmenu 导航菜单可以配置两个跳转方式：\n\n跳转博客到内部页面。\n跳转到外部第三方网站。\n\n跳转内部页面\n\nHexo 项目在初始（默认）状态下并没有 Categories（分类）、Tags（标签）、About（关于）、Links（友链）等，这些都需要自己先手动创建，再配置使用，否则无效。\n\n我们以创建「 About（关于）」页面为例：\n\n在 Hexo 项目根目录下执行命令 hexo new page about ，即可在 source 目录下生成 about 文件夹。\nhexo new page about\n\n\n在 Keep 主题配置文件 _config.yml 的 menu 配置项下添加 **About: /about**。\n menu:  Home: /  Archives: /archives  # Categories: /categories  # Tags: /tags  # Links: /links  About: /about\n\n 3.打开 Hexo 项目下 /source/about/index.md 文件，填写 Adout 页面的内容。 支持 Markdown 和 HTML 格式；\n 参考如下：\n ---title: aboutdate: 2020-03-19 14:59:53comment: true---## About meXPoet「 Keep core developer 」............\n\n\n提示\ncomment: true 表示该页面开启评论功能。（默认不开启评论）\n特别注意\n创建页面时自动生成的 title 属性不要修改！不要删除！例如：title: about 不能修改！不能删除！\n\n\n\n\n\n跳转外部网站\n\n如果要实现在导航栏点击菜单时跳转到第三方网站，只需把配置项的值填写为第三方网站的 URL 即可。 例如：在导航栏配置跳转到 Baidu 网站的菜单。\n  menu:  Baidu: https://www.baidu.com/  百度: https://www.baidu.com/\n\n\nsocial_contactsocial_contact 在首屏里面配置第三方社交链接。\nsocial_contact:  enable: false  links:    github:          # GitHub    weixin:          # WeChat    qq:              # QQ    weibo:           # WeiBo    zhihu:           # ZhiHu    twitter:         # Twitter    facebook:        # Facebook    email:           # Email\n\n\n\nenable：enable 设置是否开启显示第三方社交链接，可选值：true 或 false。\n\nlinks：在 links 下方的第三方社交平台配置项填写自己的 URL。\n\n点击跳转外部链接\n当我们在 links 的配置项里填写的是 URL 时，点击对应图标时会直接跳转到外部 URL。\n配置示例：\ngithub: https://github.com/lucky-carp\n\n点击悬浮打开图片\n当我们需要在点击图标时悬浮打开图片，例如点击微信图标，悬浮打开微信二维码时，那么需要给 URL 加上前缀 **img | **。\n\n此处的 URL 必须是图片外链\n\n配置示例：\nweixin: img | https://x.com/images/wechat.png\n\n\n自定义配置\nKeep 主题内置 Font Awesome v6.2.0 免费版图标，基本已覆盖我们所需的全部图标。\n如果要自定义更改图标或添加其他第三方链接，例如：添加 Instagram\n\n在 Font Awesome 搜索 Instagram 图标。\n\n填写图标名（如上图），添加到主题配置文件 _config.yml 的 social_contact.links 配置项里面。\nsocial_contact:  enable: true  links:    instagram: https://www.instagram.com/xxxxxxxx\n\n\n\n\nhome_articlehome_article 该配置项用于设置首页文章块底部的标签和分类信息显示。\nhome_article:  category:    enable: false    limit: 3  tag:    enable: false    limit: 5\n\n\ncategory：\n\nenable 是否开启显示文章分类，可选值：true 或 false。\nlimit 限制显示文章分类个数，默认 3 个。\n\n\ntag：\n\nnable 是否开启显示文章标签，可选值：true 或 false。\nlimit 限制显示文章标签个数，默认 5 个。\n\n\n开启效果展示：\n\n\n\n\npostpost 配置项用于设置文章内容页的文章字数统计、阅读时长、作者标识和图片排列位置 。\npost:  author_label:    enable: true  # Option values: true | false    auto: true    # Option values: true | false    custom_label_list: [&quot;Trainee&quot;, &quot;Engineer&quot;, &quot;Architect&quot;]  word_count:    enable: false       # Option values: true | false    wordcount: false    # Word count, one article. Option values: true | false    min2read: false     # Time to read, one article. Option values: true | false  img_align: left  # Option values: left | center  copyright_info: false  # Option values: true | false\n\n\nauthor_label：author_label 设置文章内容页的作者标识（称号），目前有两种方案：\n\nauto 自动生成 Lv1、Lv2、Lv3 …… 判断依据为文章数量，Lv 级别越高，增长越慢。\nauthor_label: enable: true auto: true\n\ncustom_label_list 自定义标识列表，数组项可以 一个 或 多个，匹配的依据是按文章数量。本站采用自定义方式，定义了四个级别：[“Junior”, “Intermediate”, “Senior”,”Architect”]代表初级、中级、高级开发者和架构师。\n效果展示：\n\n\n\n\nword_count：word_count 用于实现文章字数统计和计算阅读时长，使用前需在 Hexo 项目根目录下安装第三方依赖 hexo-wordcount。\nnpm install hexo-wordcount\n\n\nenable：enable 是否启用文章字数统计和文章阅读时长统计功能，可选值：true | false 。\n\nwordcount：wordcount 是否开启文章字数统计，可选值：true 或 false。\nword_count:  enable: true  wordcount: true\n\n\nmin2read：min2read 是否开启文章阅读时长，可选值：true 或 false。\nword_count:  enable: true  min2read: true\n\n  word_count和min2read的效果展示：\n\n\nimg_align：img_align 设置文章内容页的图片排列位置，默认 left，可选：left（靠左）、center（居中）。\nimg_align: left  # Option values: left | center\n\ncopyright_info：copyright_info 用于开启文章内容页的文章版权信息，可选值：true 或 false。\ncopyright_info: true\n\n效果展示：\n\n\n\n\ncode_blockcode_block 用于开启代码块工具，包含代码语言、代码复制、代码块折叠、设置代码高亮主题等。\ncode_block:  tools:    enable: false    style: default   # Option values: default | mac  highlight_theme: default   # Option values: default | obsidian\n\n\ntools\nenable：enable 是否开启代码块工具。\nstyle：style 设置代码块工具样式，可选 default 和 mac。本站当前使用的是default。\n\n\nhighlight_theme\nhighlight_theme 设置代码高亮主题，可选 default 和 obsidian。本站当前使用的是default。\n\n\n\n效果展示：\n\n\ntoctoc 用于设置文章 TOC 目录结构，非常实用的功能，可以快速查看文章目录结构和跳转指定位置，建议开启。\ntoc:  enable: false  number: false  expand_all: false  init_open: false\n\n\nenable：enable 是否开启 TOC，可选值：true 或 false。\nnumber：number 给 TOC 目录结构自动加上数字编号，可选值：true 或 false。\nexpand_all：expand_all 展开所有目录结构，可选值：true 或 false。\nexpand_all: true 自动展开所有的目录结构\nexpand_all: false 边滚动页面边展开对应的位置的目录\n\n\n\n效果展示：\n\n\n\nwebsite_countwebsite_count 用于设置网站计数，Keep 主题内置不蒜子计数，无需额外配置，直接选择你要开启的计数项即可。\nwebsite_count:  busuanzi_count:    enable: false    site_uv: false    site_pv: false    page_pv: false\n\n\nbusuanzi_count\nenable ：是否开启不蒜子计数，可选值：true 或 false。\nsite_uv：网站访问人数（显示在底部），可选值：true 或 false。\nsite_pv ：网站总访问量（显示在底部），可选值：true 或 false。\npage_pv 文章阅读次数（显示在文章内容页），可选值：true 或 false。\n\n\n\n效果展示：\n\n\n\nlocal_searchlocal_search 用于设置站内搜索功能，非常实用，建议开启。开启后，头部导航栏右侧将出现搜索按钮。\n通过输入关键字，可完成对博客站点内所有文章进行搜索匹配。\nlocal_search:  enable: false  preload: false     # Preload the search data when the page loads\n\n\nenable ：是否开启站内搜索功能，可选值：true 或 false。\npreload ：设置是否在使用搜索功能前进行预加载搜索数据（建议启用）。\n\n站内搜索功能配置流程：\n\n在 Hexo 项目根目录下安装插件 hexo-generator-searchdb。\nnpm install hexo-generator-searchdb\n\n在 Hexo 配置文件 _config.yml 里添加如下配置项。\nsearch:  path: search.json  field: post  content: true  format: striptags\n\n主题配置文件 _config.yml 的 local_search.enable 配置项的值设为 true。\nlocal_search:  enable: true\n\n效果展示：\n\n\ncommentcomment 该配置项用于开启和配置 Keep 主题的评论系统。\n\nenable ：设置是否开启评论系统，可选值：true 或 false。\n\nuse 配置使用哪一款评论系统，可选值：valine | gitalk | twikoo | waline。\nuse: valine  # values: valine | gitalk | twikoo | waline\n\n本站使用的评论系统是valine，无需登录，配置简单。\n\nValine 是一款基于 LeanCloud 的快速、简洁且高效的无后端评论系统。\n\n详情查看：\nhttps://github.com/xCss/Valine\nhttps://valine.js.org\n\nappid\nappid 设置 LeanCloud 应用的 App ID。\n参考 Valine 官方配置教程，获取 App ID，并填入主题配置项 appid 中。\nvaline:  appid: ih2nzxxxxxxxxxxxxxxxxxxxxxx\n\nappkey\nappkey 设置 LeanCloud 应用的 App Key。\n参考 Valine 官方配置教程，获取 App Key，并填入主题配置项 appkey 中。\nvaline:  appkey: gdf6xxxxxxxxxxxxxxxxxxxxx\n\nplaceholder\nplaceholder 可填，评论框的在还没输入内容时的显示的文本信息。\n\n\n\n\n效果展示：\n\n\nrssrss 该配置项用于开启 RSS 订阅功能。\n\nRSS(Rich Site Summary)订阅是一种信息的同步发布和订阅方式，它是一种自动化的信息更新的方式。RSS订阅提供了一个常规化的格式，用于博客和其他网站的更新内容的发放。使用RSS订阅，用户可以在自己的RSS阅读器中订阅感兴趣的博客、新闻网站、论坛等站点的更新信息，这样就可以在一个地方获取所有网站的更新内容而无需逐个打开网站。RSS订阅的好处是可以节省浏览多个网站时的时间，使人们更好地掌握自己所关注的领域的动态。\n\nrss:  enable: false\n\n开启流程：\n\n在 Hexo 项目根目录下安装插件 hexo-generator-feed。\nnpm install hexo-generator-feed\n\n在 Hexo 配置文件 _config.yml 增加如下配置项。\n# Feed Atom# npm install hexo-generator-feedfeed:  type: atom  path: atom.xml  limit: 20\n\n在 Keep 主题配置文件 _config.yml 开启 RSS。\nrss:  enable: true\n\nRSS 订阅功能开启后，将会在右下角工具按钮组里面显示RSS 按钮。\n\n\n\n\nlazyloadlazyload 该配置项用于开启图片懒加载，可选值：true 或 false。\nlazyload:  enable: false  # Option values: true | false\n\n开启后，初始打开页面时不会一次性去加载所有的图片，只有当视窗滚动到图片位置才加载对应位置的图片资源。\n当图片过多时，开启图片懒加载功能，能有效提高页面加载速度，建议启用。\n\ncdncdn 用于开启 Keep 主题源码资源（JS 文件、CSS 文件和字体文件）的 CDN 加速功能。\ncdn:  enable: false       # Option values: true | false  provider: jsdelivr  # Option values: jsdelivr | unpkg\n\n\nCDN 原理\nKeep 主题源码的 CDN 加速原理是使用 jsDelivr 或 UNPKG 来加速托管在 NPM 上的 hexo-theme-keep 包的资源。\n\n\nenable :设置是否开启 CDN 加速功能，可选值：true 或 false。\n\nprovider :设置 CDN 加速功能的提供商，可选值：jsdelivr 或 unpkg。\n\n\n建议启用 CDN 的场景：如果你的 Keep 主题博客站点部署在国外服务器，例如：GitHub Pages、Vercel 等，那么建议你开启 CDN 加速功能，打开页面会有较快的资源加载速度。\n不建议启用 CDN 的场景：如果你的 Keep 主题博客站点部署在国内服务器，例如：Gitee Pages、阿里云、腾讯云、百度云等，在国内访问已经拥有较好的资源加载速度，则不建议开启 CDN 加速功能。\n\npjaxpjax 该配置项用于开启 Keep 主题的 PJAX 功能，带来单页应用的体验，可选值：true 或 false。\npjax:  enable: false  \n\n\nPJAX\nPJAX 的工作原理是通过 Ajax 从服务器获取 HTML，并用 Ajax 请求得到 HTML 替换页面上容器的内容，然后使用 pushState 更新浏览器的当前 URL，而无需重新加载页面的布局或任何资源（JS，CSS），从而提供快速，完整页面加载的外观。但实际上它只是 Ajax 和 pushState。\n\nPJAX 启用后，点击链接页面跳转时，网页顶部会出现彩色进度条。\n效果展示：\n\n\nfooterfooter 该配置项用于设置网站底部的信息展示。\nfooter:  since: 2020  icp:  site_deploy:    enable: false    provider: github # github | vercel | netlify | gitee | aliyun | tencent_cloud | upyun    url:\n\n\nsince： 设置网站起始年份，可以为空，不填则自动使用当前年份。\nicp 设置网站 ICP 备案编号，可以为空，不填则不显示。\nsite_deploy 是 v3.6.0 新增功能，用于配置显示你的 Keep 主题静态网站部署提供商。\nenable 是否启用，可选值：true | false 。\nprovider 配置网站部署提供商，可选值：github | vercel | netlify | gitee | aliyun | tencent_cloud | upyun 。\nurl 配置网站部署提供商的跳转链接，可以为空。\n\n\n\n\n以上就是使用keep-theme主题的详细介绍，本文主要参考了keep主题的官方使用指南：https://keep-docs.xpoet.cn/。\n","categories":["Technology"],"tags":["Tool"]}]